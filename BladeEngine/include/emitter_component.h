#ifndef BLADE_EMITTER_COMPONENT_H_
#define BLADE_EMITTER_COMPONENT_H_

#include "behaviour_component.h"
#include <vector>
#include "mesh.h"
#include "material.h"

namespace Blade
{
	/**
	\brief Represents a particle of the particle system
	*/
	struct Particle
	{
		Vec3f position;
		Vec4f color;
		float size;

		Vec3f velocity;
		float life;
		bool active;

		double spawn_time;
	};

	/**
	\brief Descriptor of the emitter.
	\details Stores all the information relevant to the emitter.
	*/
	struct EmitterDescriptor : Resource
	{
		/*
		* \details Cache of the current velocity of the emitter
		*/
		Vec3f velocity;

		/*
		* \details Cache external velocity of the emitter
		*/
		Vec3f externalForce;

		float spawnRate;
		float lifespan;
		float maxParticles;
		float spawnRadius;

		float particleSize;

		Vec4f startColor;
		Vec4f endColor;

		Texture* texture;

		RenderStateType blendStateType;

		float particlesToSpawn{ 0 };
		float velocityRange;

		bool active;

		EmitterDescriptor();

		bool Load(const std::wstring& file_name) noexcept override;
	};

	/**
	* \brief EmitterComponent is a behaviour component of the engine that
	* can emit particles. Emitter components are used by the particle system.
	*/
	class EmitterComponent : public BehaviourComponent
	{
	private:
		/*
		* \details Vectors of particles of this emitter
		*/
		std::vector<Particle> m_Particles;

		/*
		* \details The descriptor of this emitter
		*/
		EmitterDescriptor m_Descriptor;

		/*
		* \details Mesh of the particle that this emitter will spawn.
		*/
		Mesh* m_pMesh;

		void EmitParticles(const float dt, double tsec) noexcept;

		void KillAndUpdateParticles(double tsec, const float dt) noexcept;

		void UpdateParticleColor(double t, Vec4f& color) const noexcept;

		void UpdatePhysics(float  dt, Particle& p) const noexcept;

	public:
		/**
		* \brief Creates new instance of patricle emitter component.
		* \param parent Pointer to parent entity of the component.
		* \remarks Default particle system decsription assumed.
		*/
		explicit EmitterComponent(Entity* parent);

		/**
		* \brief Creates new instance of patricle emitter component.
		* \param parent Pointer to parent entity of the component.
		* \param descriptor Emiter descriptor structure describing particle system.
		*/
		explicit EmitterComponent(Entity* parent, EmitterDescriptor descriptor);

		EmitterComponent(const EmitterComponent& other) = default;

		EmitterComponent& operator=(const EmitterComponent& other) = default;

		~EmitterComponent();


		/**
		* \brief Returns std::vector (list) of all alive particles emitted by this component.
		* \return Vector of all alive particles emitted by this component.
		*/
		const std::vector<Particle>& GetParticles() const noexcept;


		/**
		* \brief Returns descriptor sturcture of this emitter component.
		* \return Descriptor sturcture of this emitter component.
		*/
		const EmitterDescriptor& GetEmitterDescriptor() const noexcept;

		/**
		* \brief Sets new descriptor sturcture of this emitter component.
		* \param descriptor New descriptor sturcture to be used by this emitter component.
		*/
		void SetDescriptor(const EmitterDescriptor& descriptor) noexcept;
		
		/**
		* \brief Returns particle spawn rate of this emitter.
		* \return Particle spawn rate of this emitter.
		*/
		float GetSpawnRate() const noexcept;

		/**
		* \brief Sets particle spawn rate of this emitter component.
		* \param spawnRate New spawn rate value of this emitter component.
		* \remarks Alters spawn rate value of the emiter descriptor.
		*/
		void SetSpawnRate(const float spawnRate) noexcept;

		/**
		* \brief Returns particle life  span of this emitter.
		* \return Particle life  span of this emitter.
		*/
		float GetLifeSpan() const noexcept;

		/**
		* \brief Sets particle life span of this emitter component.
		* \param lifespan New life span value fo particles generated by this emitter component.
		* \remarks Alters life span of the emiter descriptor.
		*/
		void SetLifeSpan(const float lifespan) noexcept;

		/**
		* \brief Returns maximum number of active particles allowed.
		* \return Maximum number of active particles allowed.
		*/
		float GetMaxParticles() const noexcept;

		/**
		* \brief Sets maximum number of active particles.
		* \param maxParticles Maximum number of active particles.
		* \remarks Alters max particles value of the emiter descriptor.
		*/
		void SetMaxParticles(const float maxParticles) noexcept;

		/**
		* \brief Returns particles spawn radius.
		* \return Particles spawn radius.
		*/
		float GetSpawnRadius() const noexcept;

		/**
		* \brief Sets particles spawn radius.
		* \param spawnRadius Particles spawn radius.
		* \remarks Alters value in the emiter descriptor.
		*/
		void SetSpawnRadius(const float spawnRadius) noexcept;

		/**
		* \brief Returns particle size
		* \return Particle size emitted by this component.
		*/
		float GetParticleSize() const noexcept;

		/**
		* \brief Sets particle size.
		* \param particleSize Size of the particle.
		* \remarks Alters value in the emiter descriptor.
		*/
		void SetParticleSize(const float particleSize) noexcept;


		/**
		* \brief Returns particle start colour.
		* \return Particle start colour.
		*/
		const Vec4f& GetStartColor() const noexcept;

		/**
		* \brief Sets particle initial colour.
		* \param startColor Particle initial colour.
		* \remarks Alters value in the emiter descriptor.
		*/
		void SetStartColor(const Vec4f& startColor) noexcept;

		/**
		* \brief Returns particle final colour.
		* \return Particle final colour.
		*/
		const Vec4f& GetEndColor() const noexcept;

		/**
		* \brief Sets particle final colour.
		* \param endColor Particle final colour.
		* \remarks Alters value in the emiter descriptor.
		*/
		void SetEndColor(const Vec4f& endColor) noexcept;

		/**
		* \brief Returns active flag of the particle system.
		* \return Active flag of the particle system.
		*/
		bool IsActive() const noexcept;

		/**
		* \brief Sets active flag of the particle system.
		* \param active Active flag of the particle system.
		*/
		void SetActive(const bool active) noexcept;


		/**
		* \brief Returns initial velocity of the particles created by this emitter.
		* \return Initial velocity of the particles created by this emitter.
		*/
		const Vec3f& GetVelocity() const noexcept;

		/**
		* \brief Sets particles velocity.
		* \param velocity Velocity of emited particles.
		* \remarks Alters value in the emiter descriptor.
		*/
		void SetVelocity(const Vec3f& velocity) noexcept;



		/**
		* \brief Returns particles velocity range
		* \return Particles velocity range
		*/
		float GetVelocityRange() const noexcept;

		/**
		* \brief Sets particles velocity range
		* \param velocityRange Velocity range of emited particles.
		* \remarks Alters value in the emiter descriptor.
		*/
		void SetVelocityRange(const float velocityRange) noexcept;

		/**
		* \brief Returns external force acting on the particles
		* \return External force acting on the particles
		*/
		const Vec3f& GetExternalForce() const noexcept;

		/**
		* \brief Sets external force acting on the particles
		* \param  externalFroce External force acting on the particles
		* \remarks Alters value in the emiter descriptor.
		*/
		void SetExternalForce(const Vec3f& externalFroce) noexcept;

		/**
		* \brief Returns pointer to mesh on which each generated particle texture will be rendered.
		* \return Pointer to mesh on which each generated particle texture will be rendered.
		*/
		Mesh* GetMesh() const noexcept;

		/**
		* \brief Sets mesh on which each generated particle texture will be rendered.
		* \param mesh Pointer to mesh used to generate particle texure on.
		* \remarks Alters value in the emiter descriptor.
		*/
		void SetMesh(Mesh* mesh) noexcept;

		/**
		* \brief Returns pointer to texture used to render particles.
		* \return Pointer to texture used to render particles.
		*/
		Texture* GetTexture() const noexcept;

		/**
		* \brief Sets texture used to render particles.
		* \param texture Pointer to texture used to render particles.
		* \remarks Alters value in the emiter descriptor.
		* Texture is uniform across all particles generated by this emitter.
		*/
		void SetTexture(Texture* texture) noexcept;

		/**
		* \brief Returns blend mode for this particle emitter.
		* \return Blend mode for this particle emitter.
		*/
		RenderStateType GetBlendStateType() const noexcept;

		/**
		* \brief Sets blend mode for this particle emitter.
		* \param blendStateType Blend state type describing required blend mode.
		* \remarks Alters value in the emiter descriptor.
		*/
		void SetBlendStateType(RenderStateType blendStateType) noexcept;

		/*
		* \brief Update the particles owned by this emitter.
		* \details The particle loop implemented is: kill particles -> update
		*/
		void Update(const float dt, const long time /* =0*/) noexcept override;

		void Setup() noexcept override;

		void Teardown() noexcept override;
	};

}

#endif